{"name":"Ruby Event Framework","tagline":"Event Framework is a minimalistic library providing publish–subscribe pattern","body":"# Ruby Event Framework\r\n\r\nEvent Framework is a minimalistic library providing publish–subscribe pattern.\r\n\r\n### Installing\r\n\r\n    gem install event-framework\r\n\r\n### Example\r\n\r\n    require 'event-framework'\r\n\r\n    class Server\r\n      include EF::Object\r\n    end\r\n\r\n    class Client\r\n      include EF::Object\r\n    end\r\n\r\n    server = Server.new\r\n    client = Client.new\r\n\r\n    EF::Thread.new do\r\n      loop do\r\n        sleep 1\r\n        server.trigger('event', 'message')\r\n      end\r\n    end\r\n\r\n    EF::Thread.new do\r\n      client.listen_to(server, 'event') do |server, message|\r\n        puts message\r\n      end\r\n    end\r\n\r\n    EF::Loop.loop\r\n\r\n### Notices\r\n\r\n* EF::Object should be included after initialize\r\n* Callbacks will be executed in threads of subscribers (where they were defined)\r\n* In the example the handler will be called in the main thread,  \r\nbut if you define the client in the thread where you bind it to the server's event,  \r\nthen the handler will be called in the same thread\r\n* You can create docs by `rdoc lib`\r\n\r\n### Docs\r\n\r\n**EF::Thread**  \r\n*provides threads with separated event loops*\r\n\r\n**EF::Thread.new(*args, &block)**  \r\n*creates a thread  \r\nparameters will be passed to the block*\r\n\r\n**EF::Thread#add(*args, &block)**  \r\n*adds a task which will be executed in the event loop  \r\nparameters will be passed to the block*\r\n\r\n**EF::Loop**  \r\n*provides blocking event loop*\r\n\r\n**EF::Loop.loop**  \r\n*starts the loop*\r\n\r\n**EF::Loop.thread**  \r\n*returns corresponding EF::Thread object  \r\nwhich you can use to add new tasks*\r\n\r\n**EF::Object**  \r\n*provides methods for publish–subscribe pattern*\r\n\r\n**EF::Object#thread**  \r\n*returns the thread where the object was defined*\r\n\r\n**EF::Object#trigger(event, *args)**  \r\n*calls handlers for observers for the event  \r\nparameters and the caller will be passed to the handlers  \r\nnotice: usually in threads of sibscribers*\r\n\r\n**EF::Object#listen_to(observable, event, &block)**  \r\n*registrate a handler for the event*\r\n\r\n**EF::Object#on(event, &block)**  \r\n*listen to self*\r\n\r\n**EF::Object#stop_listening(observable=nil, event=nil, block=nil)**  \r\n*unregistrate all matching handlers*\r\n\r\n**EF::Object#off(event=nil, block=nil)**  \r\n*stop listening to self*\r\n\r\n**EF::Object#move_to(thread)**  \r\n*by default handlers will be executed in the thread where the receiver was defined  \r\nthe method changes it so that handlers will be executed in the passed thread*\r\n\r\n**Author (Speransky Danil):**\r\n[Personal Page](http://dsperansky.info) |\r\n[LinkedIn](http://ru.linkedin.com/in/speranskydanil/en) |\r\n[GitHub](https://github.com/speranskydanil?tab=repositories) |\r\n[StackOverflow](http://stackoverflow.com/users/1550807/speransky-danil)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}